[user]
  name = {{ full_name }}
  email = {{ git_email }}
{% if git_signing_key %}
  signingkey = {{ git_signing_key }}
{% endif %}
[core]
  excludesfile = ~/.gitignore_global
  attributesfile = ~/.gitattributes_global
  editor = vim
  pager = diff-so-fancy | less --tabs=4 -RFX
[push]
  default = upstream
{% if git_signing_key %}
[commit]
  gpgsign = true
{% endif %}
[alias]
  st = status -sb
  prune = fetch --prune
  a = add
  br = branch
  branches = !git-better-branch.sh
  bs = branches
  co = checkout
  sw = switch
  cp = cherry-pick
  who = shortlog -sn
  psh = push
  ph = push
  pish = push
  psuh = push
  pul = pull
  pushf = push --force-with-lease

  po = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""

  ff = merge --ff --ff-only

  # Resets
  undo = reset --soft HEAD^
  r = reset
  r1 = reset HEAD^
  ro = reset origin

  rc = rebase --continue
  mt = mergetool

  # Stash
  sl = stash list
  sp = stash pop
  ss = stash save

  # Logs
  l = log --abbrev-commit
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  chlog ="!git log --pretty=format:\"%C(yellow)%h %Creset%s%Cblue [%cn]\" --decorate --no-merges $(git describe --abbrev=0 --tags)..HEAD"
  lss = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  logr = log --graph
  logs = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  fl = log -u # file log, specify a file

  today = log --since="04:00" --pretty=format:"%C(yellow)%h\\ %Cblue[%cn]\\ %Creset%s\\ "

  yesterday = log --since=yesterday --before=4am --pretty=format:"%C(yellow)%h\\ %Cblue[%cn]\\ %Creset%s\\ "
  
  wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

  # Diff current
  d = diff
  dt = difftool

  # Diff last, and diff revisons
  dls = "!git ll -1" # diff last list
  dl = diff --cached HEAD^ # diff last commit
  dlt = difftool --cached HEAD^ # diff last commit
  dr = "!f() { git diff "$1"^.."$1"; }; f" #diffrev
  dtr = "!f() { git difftool "$1"^.."$1"; }; f"
  lsr = "!f() { git ll "$1"^.."$1"; }; f" # list rev

  # Search
  f = "!git ls-files | grep -i"
  grep = grep -Ii

  # Assume file unchanged
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

  # Tags
  lasttag = describe --tags --abbrev=0

  # List my aliases
  alias = "!git config -l | grep alias | cut -c 7-"
[diff]
  external = difft
[gpg]
	program = gpg
[merge]
	tool = meld
	ff = false
[mergetool "meld"]
    # Choose one of these 2 lines (not both!) explained below.
    # cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    cmd = meld --auto-merge "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[mergetool "p4merge"]
    cmd = /home/will/bin/p4v-2019.2.1904275/bin/p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    trustExitCode = true
[mergetool]
	keepBackup = false
    keepTemporaries = false
[pull]
	rebase = true
[tag]
	forceSignAnnotated = true
	gpgSign = true
[rerere]
	enabled = true
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[color]
	ui = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[absorb]
    maxStack = 50
[init]
	defaultBranch = master
